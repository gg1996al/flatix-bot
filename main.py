import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–∏–º–µ—Ä –±–∞–∑—ã –∫–≤–∞—Ä—Ç–∏—Ä (–∑–∞–≥–ª—É—à–∫–∞)
FLATS = [
    {
        "id": 1,
        "district": "—Ç–∞–∏—Ä–æ–≤–∞",
        "rooms": 1,
        "price": 8500,
        "description": "1-–∫ –Ω–∞ –¢–∞–∏—Ä–æ–≤–∞, 8500 –≥—Ä–Ω. –ù–æ–≤—ã–π —Ä–µ–º–æ–Ω—Ç.",
        "url": "https://example.com/flat123",
        "phone": "+380931234567"
    },
    {
        "id": 2,
        "district": "—Ü–µ–Ω—Ç—Ä",
        "rooms": 2,
        "price": 11000,
        "description": "2-–∫ –≤ –¶–µ–Ω—Ç—Ä–µ, 11000 –≥—Ä–Ω. –í–∏–¥ –Ω–∞ –º–æ—Ä–µ.",
        "url": "https://example.com/flat456",
        "phone": "+380987654321"
    },
]

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –û–¥–µ—Å—Å–µ.\n–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "¬´1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –¢–∞–∏—Ä–æ–≤–∞ –¥–æ 9000¬ª\n"
        "–∏–ª–∏\n"
        "¬´2-–∫ –¶–µ–Ω—Ç—Ä –¥–æ 12000¬ª"
    )

# –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä
@dp.message_handler()
async def search_flat(message: types.Message):
    text = message.text.lower()
    results = []

    for flat in FLATS:
        if flat["district"] in text and str(flat["rooms"]) in text and str(flat["price"]) in text:
            results.append(flat)
        elif flat["district"] in text and str(flat["rooms"]) in text:
            if "–¥–æ" in text:
                try:
                    max_price = int("".join([c for c in text.split("–¥–æ")[-1] if c.isdigit()]))
                    if flat["price"] <= max_price:
                        results.append(flat)
                except:
                    continue

    if results:
        for flat in results:
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url=f"tel:{flat['phone']}"),
                InlineKeyboardButton("üì∑ –°–º–æ—Ç—Ä–µ—Ç—å", url=flat["url"])
            )
            await message.answer(flat["description"], reply_markup=keyboard)
    else:
        await message.answer("üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å!")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
